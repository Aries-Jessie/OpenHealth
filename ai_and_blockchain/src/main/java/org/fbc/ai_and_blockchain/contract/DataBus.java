package org.fbc.ai_and_blockchain.contract;

import io.reactivex.Flowable;
import java.math.BigInteger;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;
import java.util.concurrent.Callable;
import org.fisco.bcos.channel.client.TransactionSucCallback;
import org.fisco.bcos.web3j.abi.EventEncoder;
import org.fisco.bcos.web3j.abi.TypeReference;
import org.fisco.bcos.web3j.abi.datatypes.DynamicArray;
import org.fisco.bcos.web3j.abi.datatypes.Event;
import org.fisco.bcos.web3j.abi.datatypes.Function;
import org.fisco.bcos.web3j.abi.datatypes.Type;
import org.fisco.bcos.web3j.abi.datatypes.Utf8String;
import org.fisco.bcos.web3j.abi.datatypes.generated.Uint256;
import org.fisco.bcos.web3j.crypto.Credentials;
import org.fisco.bcos.web3j.protocol.Web3j;
import org.fisco.bcos.web3j.protocol.core.DefaultBlockParameter;
import org.fisco.bcos.web3j.protocol.core.RemoteCall;
import org.fisco.bcos.web3j.protocol.core.methods.request.BcosFilter;
import org.fisco.bcos.web3j.protocol.core.methods.response.Log;
import org.fisco.bcos.web3j.protocol.core.methods.response.TransactionReceipt;
import org.fisco.bcos.web3j.tuples.generated.Tuple4;
import org.fisco.bcos.web3j.tx.Contract;
import org.fisco.bcos.web3j.tx.TransactionManager;
import org.fisco.bcos.web3j.tx.gas.ContractGasProvider;

/**
 * <p>Auto generated code.
 * <p><strong>Do not modify!</strong>
 * <p>Please use the <a href="https://docs.web3j.io/command_line.html">web3j command line tools</a>,
 * or the org.fisco.bcos.web3j.codegen.SolidityFunctionWrapperGenerator in the 
 * <a href="https://github.com/web3j/web3j/tree/master/codegen">codegen module</a> to update.
 *
 * <p>Generated with web3j version none.
 */
@SuppressWarnings("unchecked")
public class DataBus extends Contract {
    public static final String BINARY = "";

    public static final String ABI = "[{\"constant\":false,\"inputs\":[{\"name\":\"account\",\"type\":\"string\"},{\"name\":\"superior\",\"type\":\"string\"},{\"name\":\"public_key\",\"type\":\"string\"},{\"name\":\"verify_key\",\"type\":\"string\"},{\"name\":\"userType\",\"type\":\"uint256\"}],\"name\":\"subordinateRegister\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"account\",\"type\":\"string\"}],\"name\":\"getYourRequests\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"account\",\"type\":\"string\"},{\"name\":\"requestId\",\"type\":\"string\"}],\"name\":\"agreeForRequest\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"account\",\"type\":\"string\"},{\"name\":\"public_key\",\"type\":\"string\"},{\"name\":\"verify_key\",\"type\":\"string\"}],\"name\":\"superiorRegister\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"account\",\"type\":\"string\"}],\"name\":\"getUserPubKey\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"account\",\"type\":\"string\"},{\"name\":\"dataId\",\"type\":\"string\"}],\"name\":\"getData\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"},{\"name\":\"\",\"type\":\"string\"},{\"name\":\"\",\"type\":\"string\"},{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"account\",\"type\":\"string\"}],\"name\":\"getUserVerifyKey\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"account\",\"type\":\"string\"},{\"name\":\"requestId\",\"type\":\"string\"},{\"name\":\"dataId\",\"type\":\"string\"}],\"name\":\"requestForData\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"requestId\",\"type\":\"string\"}],\"name\":\"getRequestByRequestId\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"},{\"name\":\"\",\"type\":\"string\"},{\"name\":\"\",\"type\":\"string\"},{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getAllPatient\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"requestIndex\",\"type\":\"uint256\"}],\"name\":\"getRequest\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"},{\"name\":\"\",\"type\":\"string\"},{\"name\":\"\",\"type\":\"string\"},{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"account\",\"type\":\"string\"},{\"name\":\"owner\",\"type\":\"string\"},{\"name\":\"dataId\",\"type\":\"string\"},{\"name\":\"dataIndex\",\"type\":\"string\"}],\"name\":\"uploadData\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getUserByIndex\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"},{\"name\":\"\",\"type\":\"string\"},{\"name\":\"\",\"type\":\"string\"},{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"ret\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"account\",\"type\":\"string\"}],\"name\":\"SuperiorRegisterEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"ret\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"account\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"superior\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"userType\",\"type\":\"uint256\"}],\"name\":\"SubordinateRegisterEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"ret\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"dataId\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"dataIndex\",\"type\":\"string\"}],\"name\":\"UploadDataEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"ret\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"account\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"dataId\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"requestId\",\"type\":\"string\"}],\"name\":\"RequestForDataEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"ret\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"account\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"dataId\",\"type\":\"string\"}],\"name\":\"AgreeForRequestEvent\",\"type\":\"event\"}]";

    public static final String FUNC_SUBORDINATEREGISTER = "subordinateRegister";

    public static final String FUNC_GETYOURREQUESTS = "getYourRequests";

    public static final String FUNC_AGREEFORREQUEST = "agreeForRequest";

    public static final String FUNC_SUPERIORREGISTER = "superiorRegister";

    public static final String FUNC_GETUSERPUBKEY = "getUserPubKey";

    public static final String FUNC_GETDATA = "getData";

    public static final String FUNC_GETUSERVERIFYKEY = "getUserVerifyKey";

    public static final String FUNC_REQUESTFORDATA = "requestForData";

    public static final String FUNC_GETREQUESTBYREQUESTID = "getRequestByRequestId";

    public static final String FUNC_GETALLPATIENT = "getAllPatient";

    public static final String FUNC_GETREQUEST = "getRequest";

    public static final String FUNC_UPLOADDATA = "uploadData";

    public static final String FUNC_GETUSERBYINDEX = "getUserByIndex";

    public static final Event SUPERIORREGISTEREVENT_EVENT = new Event("SuperiorRegisterEvent", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}, new TypeReference<Utf8String>() {}));
    ;

    public static final Event SUBORDINATEREGISTEREVENT_EVENT = new Event("SubordinateRegisterEvent", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Uint256>() {}));
    ;

    public static final Event UPLOADDATAEVENT_EVENT = new Event("UploadDataEvent", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}));
    ;

    public static final Event REQUESTFORDATAEVENT_EVENT = new Event("RequestForDataEvent", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}));
    ;

    public static final Event AGREEFORREQUESTEVENT_EVENT = new Event("AgreeForRequestEvent", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}));
    ;

    @Deprecated
    protected DataBus(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    protected DataBus(String contractAddress, Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        super(BINARY, contractAddress, web3j, credentials, contractGasProvider);
    }

    @Deprecated
    protected DataBus(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    protected DataBus(String contractAddress, Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        super(BINARY, contractAddress, web3j, transactionManager, contractGasProvider);
    }

    public RemoteCall<TransactionReceipt> subordinateRegister(String account, String superior, String public_key, String verify_key, BigInteger userType) {
        final Function function = new Function(
                FUNC_SUBORDINATEREGISTER, 
                Arrays.<Type>asList(new Utf8String(account),
                new Utf8String(superior),
                new Utf8String(public_key),
                new Utf8String(verify_key),
                new Uint256(userType)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public void subordinateRegister(String account, String superior, String public_key, String verify_key, BigInteger userType, TransactionSucCallback callback) {
        final Function function = new Function(
                FUNC_SUBORDINATEREGISTER, 
                Arrays.<Type>asList(new Utf8String(account),
                new Utf8String(superior),
                new Utf8String(public_key),
                new Utf8String(verify_key),
                new Uint256(userType)),
                Collections.<TypeReference<?>>emptyList());
        asyncExecuteTransaction(function, callback);
    }

    public String subordinateRegisterSeq(String account, String superior, String public_key, String verify_key, BigInteger userType) {
        final Function function = new Function(
                FUNC_SUBORDINATEREGISTER, 
                Arrays.<Type>asList(new Utf8String(account),
                new Utf8String(superior),
                new Utf8String(public_key),
                new Utf8String(verify_key),
                new Uint256(userType)),
                Collections.<TypeReference<?>>emptyList());
        return createTransactionSeq(function);
    }

    public RemoteCall<List> getYourRequests(String account) {
        final Function function = new Function(FUNC_GETYOURREQUESTS, 
                Arrays.<Type>asList(new Utf8String(account)),
                Arrays.<TypeReference<?>>asList(new TypeReference<DynamicArray<Uint256>>() {}));
        return new RemoteCall<List>(
                new Callable<List>() {
                    @Override
                    @SuppressWarnings("unchecked")
                    public List call() throws Exception {
                        List<Type> result = (List<Type>) executeCallSingleValueReturn(function, List.class);
                        return convertToNative(result);
                    }
                });
    }

    public RemoteCall<TransactionReceipt> agreeForRequest(String account, String requestId) {
        final Function function = new Function(
                FUNC_AGREEFORREQUEST, 
                Arrays.<Type>asList(new Utf8String(account),
                new Utf8String(requestId)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public void agreeForRequest(String account, String requestId, TransactionSucCallback callback) {
        final Function function = new Function(
                FUNC_AGREEFORREQUEST, 
                Arrays.<Type>asList(new Utf8String(account),
                new Utf8String(requestId)),
                Collections.<TypeReference<?>>emptyList());
        asyncExecuteTransaction(function, callback);
    }

    public String agreeForRequestSeq(String account, String requestId) {
        final Function function = new Function(
                FUNC_AGREEFORREQUEST, 
                Arrays.<Type>asList(new Utf8String(account),
                new Utf8String(requestId)),
                Collections.<TypeReference<?>>emptyList());
        return createTransactionSeq(function);
    }

    public RemoteCall<TransactionReceipt> superiorRegister(String account, String public_key, String verify_key) {
        final Function function = new Function(
                FUNC_SUPERIORREGISTER, 
                Arrays.<Type>asList(new Utf8String(account),
                new Utf8String(public_key),
                new Utf8String(verify_key)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public void superiorRegister(String account, String public_key, String verify_key, TransactionSucCallback callback) {
        final Function function = new Function(
                FUNC_SUPERIORREGISTER, 
                Arrays.<Type>asList(new Utf8String(account),
                new Utf8String(public_key),
                new Utf8String(verify_key)),
                Collections.<TypeReference<?>>emptyList());
        asyncExecuteTransaction(function, callback);
    }

    public String superiorRegisterSeq(String account, String public_key, String verify_key) {
        final Function function = new Function(
                FUNC_SUPERIORREGISTER, 
                Arrays.<Type>asList(new Utf8String(account),
                new Utf8String(public_key),
                new Utf8String(verify_key)),
                Collections.<TypeReference<?>>emptyList());
        return createTransactionSeq(function);
    }

    public RemoteCall<String> getUserPubKey(String account) {
        final Function function = new Function(FUNC_GETUSERPUBKEY, 
                Arrays.<Type>asList(new Utf8String(account)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteCall<Tuple4<String, String, String, String>> getData(String account, String dataId) {
        final Function function = new Function(FUNC_GETDATA, 
                Arrays.<Type>asList(new Utf8String(account),
                new Utf8String(dataId)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}));
        return new RemoteCall<Tuple4<String, String, String, String>>(
                new Callable<Tuple4<String, String, String, String>>() {
                    @Override
                    public Tuple4<String, String, String, String> call() throws Exception {
                        List<Type> results = executeCallMultipleValueReturn(function);
                        return new Tuple4<String, String, String, String>(
                                (String) results.get(0).getValue(), 
                                (String) results.get(1).getValue(), 
                                (String) results.get(2).getValue(), 
                                (String) results.get(3).getValue());
                    }
                });
    }

    public RemoteCall<String> getUserVerifyKey(String account) {
        final Function function = new Function(FUNC_GETUSERVERIFYKEY, 
                Arrays.<Type>asList(new Utf8String(account)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteCall<TransactionReceipt> requestForData(String account, String requestId, String dataId) {
        final Function function = new Function(
                FUNC_REQUESTFORDATA, 
                Arrays.<Type>asList(new Utf8String(account),
                new Utf8String(requestId),
                new Utf8String(dataId)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public void requestForData(String account, String requestId, String dataId, TransactionSucCallback callback) {
        final Function function = new Function(
                FUNC_REQUESTFORDATA, 
                Arrays.<Type>asList(new Utf8String(account),
                new Utf8String(requestId),
                new Utf8String(dataId)),
                Collections.<TypeReference<?>>emptyList());
        asyncExecuteTransaction(function, callback);
    }

    public String requestForDataSeq(String account, String requestId, String dataId) {
        final Function function = new Function(
                FUNC_REQUESTFORDATA, 
                Arrays.<Type>asList(new Utf8String(account),
                new Utf8String(requestId),
                new Utf8String(dataId)),
                Collections.<TypeReference<?>>emptyList());
        return createTransactionSeq(function);
    }

    public RemoteCall<Tuple4<String, String, String, BigInteger>> getRequestByRequestId(String requestId) {
        final Function function = new Function(FUNC_GETREQUESTBYREQUESTID, 
                Arrays.<Type>asList(new Utf8String(requestId)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Uint256>() {}));
        return new RemoteCall<Tuple4<String, String, String, BigInteger>>(
                new Callable<Tuple4<String, String, String, BigInteger>>() {
                    @Override
                    public Tuple4<String, String, String, BigInteger> call() throws Exception {
                        List<Type> results = executeCallMultipleValueReturn(function);
                        return new Tuple4<String, String, String, BigInteger>(
                                (String) results.get(0).getValue(), 
                                (String) results.get(1).getValue(), 
                                (String) results.get(2).getValue(), 
                                (BigInteger) results.get(3).getValue());
                    }
                });
    }

    public RemoteCall<List> getAllPatient() {
        final Function function = new Function(FUNC_GETALLPATIENT, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<DynamicArray<Uint256>>() {}));
        return new RemoteCall<List>(
                new Callable<List>() {
                    @Override
                    @SuppressWarnings("unchecked")
                    public List call() throws Exception {
                        List<Type> result = (List<Type>) executeCallSingleValueReturn(function, List.class);
                        return convertToNative(result);
                    }
                });
    }

    public RemoteCall<Tuple4<String, String, String, BigInteger>> getRequest(BigInteger requestIndex) {
        final Function function = new Function(FUNC_GETREQUEST, 
                Arrays.<Type>asList(new Uint256(requestIndex)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Uint256>() {}));
        return new RemoteCall<Tuple4<String, String, String, BigInteger>>(
                new Callable<Tuple4<String, String, String, BigInteger>>() {
                    @Override
                    public Tuple4<String, String, String, BigInteger> call() throws Exception {
                        List<Type> results = executeCallMultipleValueReturn(function);
                        return new Tuple4<String, String, String, BigInteger>(
                                (String) results.get(0).getValue(), 
                                (String) results.get(1).getValue(), 
                                (String) results.get(2).getValue(), 
                                (BigInteger) results.get(3).getValue());
                    }
                });
    }

    public RemoteCall<TransactionReceipt> uploadData(String account, String owner, String dataId, String dataIndex) {
        final Function function = new Function(
                FUNC_UPLOADDATA, 
                Arrays.<Type>asList(new Utf8String(account),
                new Utf8String(owner),
                new Utf8String(dataId),
                new Utf8String(dataIndex)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public void uploadData(String account, String owner, String dataId, String dataIndex, TransactionSucCallback callback) {
        final Function function = new Function(
                FUNC_UPLOADDATA, 
                Arrays.<Type>asList(new Utf8String(account),
                new Utf8String(owner),
                new Utf8String(dataId),
                new Utf8String(dataIndex)),
                Collections.<TypeReference<?>>emptyList());
        asyncExecuteTransaction(function, callback);
    }

    public String uploadDataSeq(String account, String owner, String dataId, String dataIndex) {
        final Function function = new Function(
                FUNC_UPLOADDATA, 
                Arrays.<Type>asList(new Utf8String(account),
                new Utf8String(owner),
                new Utf8String(dataId),
                new Utf8String(dataIndex)),
                Collections.<TypeReference<?>>emptyList());
        return createTransactionSeq(function);
    }

    public RemoteCall<Tuple4<String, String, String, BigInteger>> getUserByIndex(BigInteger index) {
        final Function function = new Function(FUNC_GETUSERBYINDEX, 
                Arrays.<Type>asList(new Uint256(index)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Uint256>() {}));
        return new RemoteCall<Tuple4<String, String, String, BigInteger>>(
                new Callable<Tuple4<String, String, String, BigInteger>>() {
                    @Override
                    public Tuple4<String, String, String, BigInteger> call() throws Exception {
                        List<Type> results = executeCallMultipleValueReturn(function);
                        return new Tuple4<String, String, String, BigInteger>(
                                (String) results.get(0).getValue(), 
                                (String) results.get(1).getValue(), 
                                (String) results.get(2).getValue(), 
                                (BigInteger) results.get(3).getValue());
                    }
                });
    }

    public List<SuperiorRegisterEventEventResponse> getSuperiorRegisterEventEvents(TransactionReceipt transactionReceipt) {
        List<EventValuesWithLog> valueList = extractEventParametersWithLog(SUPERIORREGISTEREVENT_EVENT, transactionReceipt);
        ArrayList<SuperiorRegisterEventEventResponse> responses = new ArrayList<SuperiorRegisterEventEventResponse>(valueList.size());
        for (EventValuesWithLog eventValues : valueList) {
            SuperiorRegisterEventEventResponse typedResponse = new SuperiorRegisterEventEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.ret = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.account = (String) eventValues.getNonIndexedValues().get(1).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<SuperiorRegisterEventEventResponse> superiorRegisterEventEventFlowable(BcosFilter filter) {
        return web3j.logFlowable(filter).map(new io.reactivex.functions.Function<Log, SuperiorRegisterEventEventResponse>() {
            @Override
            public SuperiorRegisterEventEventResponse apply(Log log) {
                EventValuesWithLog eventValues = extractEventParametersWithLog(SUPERIORREGISTEREVENT_EVENT, log);
                SuperiorRegisterEventEventResponse typedResponse = new SuperiorRegisterEventEventResponse();
                typedResponse.log = log;
                typedResponse.ret = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
                typedResponse.account = (String) eventValues.getNonIndexedValues().get(1).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<SuperiorRegisterEventEventResponse> superiorRegisterEventEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        BcosFilter filter = new BcosFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(SUPERIORREGISTEREVENT_EVENT));
        return superiorRegisterEventEventFlowable(filter);
    }

    public List<SubordinateRegisterEventEventResponse> getSubordinateRegisterEventEvents(TransactionReceipt transactionReceipt) {
        List<EventValuesWithLog> valueList = extractEventParametersWithLog(SUBORDINATEREGISTEREVENT_EVENT, transactionReceipt);
        ArrayList<SubordinateRegisterEventEventResponse> responses = new ArrayList<SubordinateRegisterEventEventResponse>(valueList.size());
        for (EventValuesWithLog eventValues : valueList) {
            SubordinateRegisterEventEventResponse typedResponse = new SubordinateRegisterEventEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.ret = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.account = (String) eventValues.getNonIndexedValues().get(1).getValue();
            typedResponse.superior = (String) eventValues.getNonIndexedValues().get(2).getValue();
            typedResponse.userType = (BigInteger) eventValues.getNonIndexedValues().get(3).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<SubordinateRegisterEventEventResponse> subordinateRegisterEventEventFlowable(BcosFilter filter) {
        return web3j.logFlowable(filter).map(new io.reactivex.functions.Function<Log, SubordinateRegisterEventEventResponse>() {
            @Override
            public SubordinateRegisterEventEventResponse apply(Log log) {
                EventValuesWithLog eventValues = extractEventParametersWithLog(SUBORDINATEREGISTEREVENT_EVENT, log);
                SubordinateRegisterEventEventResponse typedResponse = new SubordinateRegisterEventEventResponse();
                typedResponse.log = log;
                typedResponse.ret = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
                typedResponse.account = (String) eventValues.getNonIndexedValues().get(1).getValue();
                typedResponse.superior = (String) eventValues.getNonIndexedValues().get(2).getValue();
                typedResponse.userType = (BigInteger) eventValues.getNonIndexedValues().get(3).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<SubordinateRegisterEventEventResponse> subordinateRegisterEventEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        BcosFilter filter = new BcosFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(SUBORDINATEREGISTEREVENT_EVENT));
        return subordinateRegisterEventEventFlowable(filter);
    }

    public List<UploadDataEventEventResponse> getUploadDataEventEvents(TransactionReceipt transactionReceipt) {
        List<EventValuesWithLog> valueList = extractEventParametersWithLog(UPLOADDATAEVENT_EVENT, transactionReceipt);
        ArrayList<UploadDataEventEventResponse> responses = new ArrayList<UploadDataEventEventResponse>(valueList.size());
        for (EventValuesWithLog eventValues : valueList) {
            UploadDataEventEventResponse typedResponse = new UploadDataEventEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.ret = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.dataId = (String) eventValues.getNonIndexedValues().get(1).getValue();
            typedResponse.dataIndex = (String) eventValues.getNonIndexedValues().get(2).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<UploadDataEventEventResponse> uploadDataEventEventFlowable(BcosFilter filter) {
        return web3j.logFlowable(filter).map(new io.reactivex.functions.Function<Log, UploadDataEventEventResponse>() {
            @Override
            public UploadDataEventEventResponse apply(Log log) {
                EventValuesWithLog eventValues = extractEventParametersWithLog(UPLOADDATAEVENT_EVENT, log);
                UploadDataEventEventResponse typedResponse = new UploadDataEventEventResponse();
                typedResponse.log = log;
                typedResponse.ret = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
                typedResponse.dataId = (String) eventValues.getNonIndexedValues().get(1).getValue();
                typedResponse.dataIndex = (String) eventValues.getNonIndexedValues().get(2).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<UploadDataEventEventResponse> uploadDataEventEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        BcosFilter filter = new BcosFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(UPLOADDATAEVENT_EVENT));
        return uploadDataEventEventFlowable(filter);
    }

    public List<RequestForDataEventEventResponse> getRequestForDataEventEvents(TransactionReceipt transactionReceipt) {
        List<EventValuesWithLog> valueList = extractEventParametersWithLog(REQUESTFORDATAEVENT_EVENT, transactionReceipt);
        ArrayList<RequestForDataEventEventResponse> responses = new ArrayList<RequestForDataEventEventResponse>(valueList.size());
        for (EventValuesWithLog eventValues : valueList) {
            RequestForDataEventEventResponse typedResponse = new RequestForDataEventEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.ret = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.account = (String) eventValues.getNonIndexedValues().get(1).getValue();
            typedResponse.dataId = (String) eventValues.getNonIndexedValues().get(2).getValue();
            typedResponse.requestId = (String) eventValues.getNonIndexedValues().get(3).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<RequestForDataEventEventResponse> requestForDataEventEventFlowable(BcosFilter filter) {
        return web3j.logFlowable(filter).map(new io.reactivex.functions.Function<Log, RequestForDataEventEventResponse>() {
            @Override
            public RequestForDataEventEventResponse apply(Log log) {
                EventValuesWithLog eventValues = extractEventParametersWithLog(REQUESTFORDATAEVENT_EVENT, log);
                RequestForDataEventEventResponse typedResponse = new RequestForDataEventEventResponse();
                typedResponse.log = log;
                typedResponse.ret = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
                typedResponse.account = (String) eventValues.getNonIndexedValues().get(1).getValue();
                typedResponse.dataId = (String) eventValues.getNonIndexedValues().get(2).getValue();
                typedResponse.requestId = (String) eventValues.getNonIndexedValues().get(3).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<RequestForDataEventEventResponse> requestForDataEventEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        BcosFilter filter = new BcosFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(REQUESTFORDATAEVENT_EVENT));
        return requestForDataEventEventFlowable(filter);
    }

    public List<AgreeForRequestEventEventResponse> getAgreeForRequestEventEvents(TransactionReceipt transactionReceipt) {
        List<EventValuesWithLog> valueList = extractEventParametersWithLog(AGREEFORREQUESTEVENT_EVENT, transactionReceipt);
        ArrayList<AgreeForRequestEventEventResponse> responses = new ArrayList<AgreeForRequestEventEventResponse>(valueList.size());
        for (EventValuesWithLog eventValues : valueList) {
            AgreeForRequestEventEventResponse typedResponse = new AgreeForRequestEventEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.ret = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.account = (String) eventValues.getNonIndexedValues().get(1).getValue();
            typedResponse.dataId = (String) eventValues.getNonIndexedValues().get(2).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<AgreeForRequestEventEventResponse> agreeForRequestEventEventFlowable(BcosFilter filter) {
        return web3j.logFlowable(filter).map(new io.reactivex.functions.Function<Log, AgreeForRequestEventEventResponse>() {
            @Override
            public AgreeForRequestEventEventResponse apply(Log log) {
                EventValuesWithLog eventValues = extractEventParametersWithLog(AGREEFORREQUESTEVENT_EVENT, log);
                AgreeForRequestEventEventResponse typedResponse = new AgreeForRequestEventEventResponse();
                typedResponse.log = log;
                typedResponse.ret = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
                typedResponse.account = (String) eventValues.getNonIndexedValues().get(1).getValue();
                typedResponse.dataId = (String) eventValues.getNonIndexedValues().get(2).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<AgreeForRequestEventEventResponse> agreeForRequestEventEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        BcosFilter filter = new BcosFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(AGREEFORREQUESTEVENT_EVENT));
        return agreeForRequestEventEventFlowable(filter);
    }

    @Deprecated
    public static DataBus load(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        return new DataBus(contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    @Deprecated
    public static DataBus load(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        return new DataBus(contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    public static DataBus load(String contractAddress, Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        return new DataBus(contractAddress, web3j, credentials, contractGasProvider);
    }

    public static DataBus load(String contractAddress, Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        return new DataBus(contractAddress, web3j, transactionManager, contractGasProvider);
    }

    public static RemoteCall<DataBus> deploy(Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        return deployRemoteCall(DataBus.class, web3j, credentials, contractGasProvider, BINARY, "");
    }

    @Deprecated
    public static RemoteCall<DataBus> deploy(Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        return deployRemoteCall(DataBus.class, web3j, credentials, gasPrice, gasLimit, BINARY, "");
    }

    public static RemoteCall<DataBus> deploy(Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        return deployRemoteCall(DataBus.class, web3j, transactionManager, contractGasProvider, BINARY, "");
    }

    @Deprecated
    public static RemoteCall<DataBus> deploy(Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        return deployRemoteCall(DataBus.class, web3j, transactionManager, gasPrice, gasLimit, BINARY, "");
    }

    public static class SuperiorRegisterEventEventResponse {
        public Log log;

        public BigInteger ret;

        public String account;
    }

    public static class SubordinateRegisterEventEventResponse {
        public Log log;

        public BigInteger ret;

        public String account;

        public String superior;

        public BigInteger userType;
    }

    public static class UploadDataEventEventResponse {
        public Log log;

        public BigInteger ret;

        public String dataId;

        public String dataIndex;
    }

    public static class RequestForDataEventEventResponse {
        public Log log;

        public BigInteger ret;

        public String account;

        public String dataId;

        public String requestId;
    }

    public static class AgreeForRequestEventEventResponse {
        public Log log;

        public BigInteger ret;

        public String account;

        public String dataId;
    }
}
